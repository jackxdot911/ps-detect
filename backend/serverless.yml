org: jack001
service: ps-detct

package:
  individually: true
  exclude:
    - node_modules/**

custom:
  userPoolId: "us-east-1_0CLbqEKoy"
  userPoolClientId: "21od8gs8rm64ac7ah555asiun3"
  userPoolName: "User pool - ps-detect"

stages:
  default:
    params:
      usersTableName: "users-table-${sls:stage}"
      workoutTableName: "workout-table-${sls:stage}"
      s3keyTableName: "s3key-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1

  httpApi:
    cors: true
    authorizers:
      customAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:custom.userPoolId}
        audience:
          - ${self:custom.userPoolClientId}

  environment:
    USERS_TABLE: ${param:usersTableName}
    WORKOUT_TABLE: ${param:workoutTableName}
    S3KEY_TABLE: ${param:s3keyTableName}
    USER_POOL_ID: ${self:custom.userPoolId}
    USER_POOL_CLIENT_ID: ${self:custom.userPoolClientId}
  
  ecr:
    images:
      psdetectposedetection:
        path: functions/poseDetect/

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${param:usersTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${param:workoutTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${param:s3keyTableName}"

            # or  wildcard to give permission to all tables
            # - "arn:aws:dynamodb:${self:provider.region}:*:table/*"
        - Effect: Allow
          Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload
            - ecr:PutImage
          Resource: "*"

        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminUpdateUserAttributes
          Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:custom.userPoolId}

          # in place of * we can put the account id (region}:*:userpool)
          # Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:custom.userPoolId}

layers:   
  commonLayer:
    path: layer/common-node
    compatibleRuntimes:
      - nodejs20.x
    package:
      include: 
        - "nodejs/node_modules/**"
        - "!nodejs/package.json"
        - "!nodejs/package-lock.json"

functions:
  userManagementApi:
    handler: functions/userManagement/userHandlers.handler
    events:
      - httpApi:
          path: /users/{userId}
          method: GET
          authorizer:
            name: customAuthorizer
      - httpApi:
          path: /users/{userId}
          method: PUT
          authorizer:
            name: customAuthorizer
    layers:
      - { Ref: CommonLayerLambdaLayer }
      
  poseDetectionApi:
    image: psdetectposedetection
    timeout: 30
    events:
      - httpApi:
          path: /ps-detect
          method: GET

  generateUserId:
    handler: functions/triggers/generateUserId.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PreSignUp
          existing: true
          forceDeploy: true

  userCreated:
    handler: functions/triggers/userCreated.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PostConfirmation
          existing: true
          forceDeploy: true

  userLoggedIn:
    handler: functions/triggers/userLoggedIn.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PostAuthentication
          existing: true
          forceDeploy: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:usersTableName}

    WorkoutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: workoutId
            AttributeType: S
        KeySchema:
          - AttributeName: workoutId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:workoutTableName}

    S3KeyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: keyId
            AttributeType: S
        KeySchema:
          - AttributeName: keyId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:s3keyTableName}











# ╰─ sls logs -f poseDetectionApi --tail                                74% 󰂁 ─╯
